Selecting Single Column

df['x_loc'] or df.x_loc

Multiple Columns
df['x_loc', 'y_loc']
columns = ['x_loc', 'y_loc']
myslice = df[columns]

Filtering based on column name like
myslice = df.filter[like='loc']
myslice = df.filter[regxex='\d']

Using iloc and loc
df.iloc[4] or df.iloc[[2,6,8]]
df.iloc[1:4]
df.iloc[1:4, [2,4,5]]  # Selecting rows and columns
df.iloc[2,4] # Selecting single value

df.set_index('x_loc') # set column as index
df.set_index(['x_loc', 'y_loc'])  # Setting multiple columns as Index
df.loc[0.6] # When x_loc is indexer
df.loc[[0.6, 0.9, 1.2]]
df.loc[:, ['x_loc', 'y_loc']]

row_number = df.index[4]

iat and at are much faster than loc and iloc in selecting single values
x_val = 0.3
single_point = df.loc[x_val, 'y_loc']
single_point = df.af[x_val, 'y_loc']
timeit single_point = df.af[x_val, 'y_loc']  #knowing how much time this operatiion takes
single_point = df.iloc[rownum, colnum]
single_point = df.iat[rownum, colnum]


Setting new index
df.set_index('x_loc', inplace=True)

Manipulating columns
df.columns # Getting columns
x_loc_column_index = df.columns.get_loc('x_loc')
Rearranging columns
set(df.columns) = set(new_columns)


Quick Reference
df.drop_duplicates(subset = 'x_loc')
